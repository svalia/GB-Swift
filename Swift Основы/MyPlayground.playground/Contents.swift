import UIKit

enum Seasons: String {
    case winter = "Winter"
    case spring = "Spring"
    case summer = "Summer"
    case autumn = "Autumn"
}
func getName (season: Seasons) -> String {
    season.rawValue
}
print("Welcome \(getName(season: .winter))!")
//func printSeason (season: Seasons) {
//    
//    print("Welcome \(season)!")
//}
//
//printSeason(season: .autumn)

//–ó–∞–¥–∞—á–∞: –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ Measurement —Å —Å–ª—É—á–∞—è–º–∏ weight, distance, volume, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ Double. –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é convertMeasurement(value: Measurement), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ Measurement –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥—Ä—É–≥—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∏–ª–æ–≥—Ä–∞–º–º—ã –≤ —Ñ—É–Ω—Ç—ã, –∫–∏–ª–æ–º–µ—Ç—Ä—ã –≤ –º–∏–ª–∏, –ª–∏—Ç—Ä—ã –≤ –≥–∞–ª–ª–æ–Ω—ã).
enum Measurement {
    case weight(Double)
    case distance(Double)
    case volume(Double)
}

func convertMeasurement(type: Measurement) -> Int {
    switch type {
    case .weight(let value): return Int(value)
    case .distance(let value): return Int(value)
    case .volume(let value): return Int(value)
    }
}
print(convertMeasurement(type: .weight(3.4)))
print(convertMeasurement(type: .distance(6.4)))
print(convertMeasurement(type: .volume(3.7)))

var c = Array<Int>(repeating: 4, count: 3)
print(c)
c.append(5)
print(c)
c.append(contentsOf: [4, 5, 6])
print(c)
c.insert(1, at: 0)
print(c)
print(c[7])

var a0 = [5, -4, 10]
for element in a0 {
    print(element)
}

var a = ["A", "B", "C"]
for (index, element) in a.enumerated() { 
print(element + " " + String(index))
}

func test(num: Int...) {
    for number in num {
        print(num)
    }
}
print(test(num: 1, -4, 10))

//–°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
var a2: Set<Int> = []
var b = Set<Int>()

//üî• –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç –º–∞—Å—Å–∏–≤–∞, –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è



//–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —É–∂–µ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
 var a3: Set<Int> = [5, 6, 10]

//–ü—Ä–∏ –ø–æ–º–æ—â–∏ –≤—ã–≤–æ–¥–∞ —Ç–∏–ø–æ–≤ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä –º–æ–∂–µ—Ç —Å–∞–º –≤—ã—á–∏—Å–ª–∏—Ç—å —Ç–∏–ø –º–Ω–æ–∂–µ—Å—Ç–≤–∞, —Ç–µ–º –Ω–µ –º–µ–Ω–µ–µ, —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —è–≤–ª—è–µ—Ç—Å—è –∏–º–µ–Ω–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º (Set) –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –±—É–¥–µ—Ç –º–∞—Å—Å–∏–≤–æ–º
var a4: Set = [5, 4, 6, 8, 10]
print(type(of: a)) // Set<Int>


var a5: Set = [5, 4, 6, 8, 10]
a4.insert(7)
a4.insert(9)
print(a4)

let test2 = { (k2: Int) -> String in
    let a = String(k2 * 7)
    print(a)
    return a
}
var j = test2(9)
print(type(of: j))

var a6: [Int] = [10, 4, 8]
a6.forEach { print($0) }
