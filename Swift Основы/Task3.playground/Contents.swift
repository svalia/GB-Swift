import UIKit

//-----------------------Задание 1---------------------------------
//Есть словарь с видами чая и их стоимостью. Есть очередь людей, которые хотят заказать чай (можно представить её в виде массива видов чая, которые хотят заказать).
//Необходимо последовательно выводить в консоль сколько заплатит покупатель (необходимо вывести его номер по порядку, чай, который он заказал, и стоимость).
// Чайное меню
let teaPrices: [String: Int] = [
    "Черный": 150,
    "Зеленый": 130,
    "Травяной": 120,
    "Улун": 160
]

// Очередь заказов
let orders = ["Зеленый", "Белый", "Травяной", "Зеленый", "Улун"] // Добавил "Белый" чай, его нет в меню, но в таких слачаях по дефолту будем готовить Черный чай

// Обработка заказов
for (index, tea) in orders.enumerated() {
    // Используем Nil Coalescing для случая, если заказанного чая нет в меню
    let price = teaPrices[tea] ?? teaPrices["Черный"]!
    print("Покупатель \(index + 1): заказал \(tea) за \(price) рублей.")
}




//-----------------------Задание 2---------------------------------

//Есть массив [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]. Необходимо создать новый массив, который будет состоять из элементов старого, но не должно быть nil, не должно быть 0 и 4, а также массив должен быть отсортирован по возрастанию.

// Инициализирую массив, который содержит как опциональные элементы (Int?), так и целочисленные элементы (Int)
let numbers: [Int?] = [-4, 5, 10, nil, 4, nil, 25, 0, nil, 16, 75, -20, -7, 15, 0, nil]

// Удаляю nil значения
let nonNilNumbers = numbers.compactMap { $0 }

// Исключаю чисела 0 и 4
let filteredNumbers = nonNilNumbers.filter { $0 != 0 && $0 != 4 }

// Сортирую чисела по возрастанию
let sortedNumbers = filteredNumbers.sorted()

print(sortedNumbers)




//-----------------------Задание 3---------------------------------

//Написать функцию, которая на вход принимает целое число, а возвращает массив, который сформирован по следующим правилам: количество элементов соответствует переданному числу, массив начинается с 1, каждый последующий элемент больше предыдущего в 2 раза.

func generateArray(n: Int) -> [Int] {
    // Проверяем, что число положительное
    guard n > 0 else { return [] }
    
    // Массив, в который будем писать результаты
    var result: [Int] = []
    // Начальное значение
    var value = 1
    
    // Цикл для заполнения массива
    for _ in 0..<n {
        result.append(value)
        value *= 2
    }
    
    return result
}

let array = generateArray(n: 5)
print(array)  // Выведет: [1, 2, 4, 8, 16]
